/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
package userclasses;

import TicTacToe.Computer;
import TicTacToe.Game;
import TicTacToe.Note;
import TicTacToe.Player;
import TicTacToe.Notes;
import com.codename1.io.Util;
import generated.StateMachineBase;
import com.codename1.ui.*;
import com.codename1.ui.events.*;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.util.Resources;
import java.util.HashMap;




/**
 *
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {

    private Notes notes;
    private Note currentNote;
    boolean ai;
    

    public StateMachine(final String resFile) {
        super(resFile);

        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
    }

    /**
     * this method should be used to initialize variables instead of the
     * constructor/class scope to avoid race conditions
     */
    @Override
    protected void initVars(final Resources res) {
        Util.register("Note", Note.class);
        notes = new Notes();
        currentNote = null;
    }

    @Override
    protected void onMain_BtnGameFriendAction(Component c, ActionEvent event) {
        showForm("GameAgainstFriend", null);
        ai = false;

    }

    @Override
    protected void onGameAgainstFriend_BtnOfflineGameAction(Component c, ActionEvent event) {
        showForm("TicTacToeOffline", null);

    }

    @Override
    protected void onTicTacToeOffline_Btn1Action(Component c, ActionEvent event) {

        if (Player.player1 == true) {
            findBtn1().setText("O");
            Player.btn1_x = true;

        } else {
            findBtn1().setText("X");
            Player.btn1_o = true;
        }

        Game.changeplayer();
        findBtn1().setEnabled(false);
Computer.field1 = false;
       if(ai==true){
           aiMove(); 
        }
    }

    @Override
    protected void onTicTacToeOffline_Btn2Action(Component c, ActionEvent event) {

        if (Player.player1 == true) {
            findBtn2().setText("O");
            Player.btn2_x = true;

        } else {
            findBtn2().setText("X");
            Player.btn2_o = true;
        }

        Game.changeplayer();
        findBtn2().setEnabled(false);
Computer.field2 = false;
        if(ai==true){
           aiMove(); 
        }
    }

    @Override
    protected void onTicTacToeOffline_Btn3Action(Component c, ActionEvent event) {

        if (Player.player1 == true) {
            findBtn3().setText("O");
            Player.btn3_x = true;

        } else {
            findBtn3().setText("X");
            Player.btn3_o = true;
        }

        Game.changeplayer();
        findBtn3().setEnabled(false);
Computer.field3 = false;
       if(ai==true){
           aiMove(); 
        }
    }

    @Override
    protected void onTicTacToeOffline_Btn4Action(Component c, ActionEvent event) {

        if (Player.player1 == true) {
            findBtn4().setText("O");
            Player.btn4_x = true;

        } else {
            findBtn4().setText("X");
            Player.btn4_o = true;
        }

        Game.changeplayer();
        findBtn4().setEnabled(false);
Computer.field4 = false;
       if(ai==true){
           aiMove(); 
        }
    }

    @Override
    protected void onTicTacToeOffline_Btn5Action(Component c, ActionEvent event) {

        if (Player.player1 == true) {
            findBtn5().setText("O");
            Player.btn5_x = true;

        } else {
            findBtn5().setText("X");
            Player.btn5_o = true;
        }

        Game.changeplayer();
        findBtn5().setEnabled(false);
Computer.field5 = false;
       if(ai==true){
           aiMove(); 
        }
    }

    @Override
    protected void onTicTacToeOffline_Btn6Action(Component c, ActionEvent event) {

        if (Player.player1 == true) {
            findBtn6().setText("O");
            Player.btn6_x = true;

        } else {
            findBtn6().setText("X");
            Player.btn6_o = true;
        }

        Game.changeplayer();
        findBtn6().setEnabled(false);
Computer.field6 = false;
        if(ai==true){
           aiMove(); 
        }
    }

    @Override
    protected void onTicTacToeOffline_Btn7Action(Component c, ActionEvent event) {

        if (Player.player1 == true) {
            findBtn7().setText("O");
            Player.btn7_x = true;

        } else {
            findBtn7().setText("X");
            Player.btn7_o = true;
        }

        Game.changeplayer();
        findBtn7().setEnabled(false);
        Computer.field7 = false;
        if(ai==true){
           aiMove(); 
        }

    }

    @Override
    protected void onTicTacToeOffline_Btn8Action(Component c, ActionEvent event) {

        if (Player.player1 == true) {
            findBtn8().setText("O");
            Player.btn8_x = true;
        } else {
            findBtn8().setText("X");
            Player.btn8_o = true;
        }
        Game.changeplayer();
        findBtn8().setEnabled(false);
        Computer.field8 = false;
        if(ai==true){
           aiMove(); 
        }
    
        
    }


    @Override
    protected void onTicTacToeOffline_Btn9Action(Component c, ActionEvent event) {

        if (Player.player1 == true) {
            findBtn9().setText("O");
            Player.btn9_x = true;

        } else {
            findBtn9().setText("X");
            Player.btn9_o = true;
        }
        Game.changeplayer();
        findBtn9().setEnabled(false);
        Computer.field9 = false;
        if(ai==true){
           aiMove(); 
        }

    }
    
private void aiMove() {
   if (!Game.isFinished) {
        int random = Computer.getField();
    
    
        Game.changeplayer();
        if (Computer.r9 == true) {
            findBtn9().setText("X");
            findBtn9().setEnabled(false);
            Player.btn9_o = true;
            Computer.field9 = false;
        }  if (Computer.r8 == true) {
            findBtn8().setText("X");
            findBtn8().setEnabled(false);
            Player.btn8_o = true;
            Computer.field8 = false;

        }  if (Computer.r7 == true) {
            findBtn7().setText("X");
            findBtn7().setEnabled(false);
            Player.btn7_o = true;
            Computer.field7 = false;

        }  if (Computer.r6 == true) {
            findBtn6().setText("X");
            findBtn6().setEnabled(false);
            Player.btn6_o = true;
            Computer.field6 = false;
        }  if (Computer.r5 == true) {
            findBtn5().setText("X");
            findBtn5().setEnabled(false);
            Player.btn5_o = true;
            Computer.field5 = false;
        }  if (Computer.r4 == true) {
            findBtn4().setText("X");
            findBtn4().setEnabled(false);
            Player.btn4_o = true;
            Computer.field4 = false;
        }  if (Computer.r3 == true) {
            findBtn3().setText("X");
            findBtn3().setEnabled(false);
            Player.btn3_o = true;
            Computer.field3 = false;
        }  if (Computer.r2 == true) {
            findBtn2().setText("X");
            findBtn2().setEnabled(false);
            Player.btn2_o = true;
            Computer.field2 = false;
        }
        if (Computer.r1 == true) {
            findBtn1().setText("X");
            findBtn1().setEnabled(false);
            Player.btn1_o = true;
            Computer.field1 = false;
        }
   }
        
    }
    @Override
    protected void onTicTacToeOffline_BtnResetAction(Component c, ActionEvent event) {
        Player.setValues();
       
        showForm("TicTacToeOffline", null);
        

    }

    @Override
    protected void onTicTacToeOffline_BtnResultAction(Component c, ActionEvent event) {
        showForm("Login", null);

    }

    @Override
    protected void onLogin_BtnSaveAction(Component c, ActionEvent event) {
        colorFields();
        Player.setValues();

        final String player1 = findTxtPlayer1().getText();
        final String player2 = findTxtPlayer2().getText();
        if (player1 != null && !"".equals(player1)) {
            findTxtPlayer1().setUIID("Name");
            findTxtPlayer2().setUIID("Name");
            try {
                notes.addNote(new Note(player1, player2));

            } catch (IllegalArgumentException e) {
                Dialog.show("Fehler", e.getMessage(), new Command[]{new Command("OK")}, Dialog.TYPE_WARNING, null, 0);
            }
        }
        back();
    }

    protected boolean initListModelMltNotizen(List cmp) {
        DefaultListModel model = new DefaultListModel();

        for (Note note : notes.getNotes()) {
            HashMap<String, Object> noteHash = new HashMap<>();
            noteHash.put("Line2", note.getPlayer1());
            noteHash.put("Note", note);
            model.addItem(noteHash);
        }

        cmp.setModel(model);

        return true;
    }

    private void colorFields() {
        final String player1 = findTxtPlayer1().getText();
        final String player2 = findTxtPlayer2().getText();

        if (player1 == null || "".equals(player1)) {
            findTxtPlayer1().setUIID("TextFieldInvalid");
        } else {
            findTxtPlayer1().setUIID("Name");
        }
        findTxtPlayer1().repaint();

        if (player2 == null || "".equals(player2)) {
            findTxtPlayer2().setUIID("TextAreaInvalid");
        } else {
            findTxtPlayer2().setUIID("Name");
        }
        findTxtPlayer2().repaint();
    }

    @Override
    protected void onMain_BtnRankAction(Component c, ActionEvent event) {

        showForm("Table", null);

    }

    @Override
    protected void onTable_MltRankAction(Component c, ActionEvent event) {
        final HashMap selection = (HashMap) findMltRank().getSelectedItem();
        currentNote = (Note) selection.get("Note");
        showForm("Detail", null);

    }

    @Override
    protected boolean initListModelMltRank(List cmp) {
        DefaultListModel model = new DefaultListModel();

        for (Note note : notes.getNotes()) {
            HashMap<String, Object> noteHash = new HashMap<>();
            noteHash.put("Line2", note.getPlayer1());
            noteHash.put("Note", note);
            model.addItem(noteHash);
        }

        cmp.setModel(model);

        return true;
    }

    @Override
    protected void beforeDetail(Form f) {
        findLblTitle().setText(currentNote.getPlayer1());
        findSlbText().setText(currentNote.getPlayer2());
    }

    protected void onDetail_BtnDeleteAction(Component c, ActionEvent event) {
        boolean wantToDelete = Dialog.show("Sind Sie sicher?", "Sind Sie sicher, dass Sie \"" + currentNote.getPlayer1() + "\" löschen möchten?", "Ja", "Nein");

        if (wantToDelete) {
            notes.deleteNote(currentNote);
        }

        currentNote = null;
        back();
    }

   

    @Override
    protected void onComputer_BtnEasyAction(Component c, ActionEvent event) {
        showForm("TicTacToeOffline", null);
 ai = true;
    }

    @Override
    protected void onMain_BtnGameComputerAction(Component c, ActionEvent event) {
        showForm("Computer", null);
       
    }
}
